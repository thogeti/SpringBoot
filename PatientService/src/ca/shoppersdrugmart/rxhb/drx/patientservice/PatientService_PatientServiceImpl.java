
package ca.shoppersdrugmart.rxhb.drx.patientservice;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.Date;
import java.util.List;

import javax.jws.WebService;
import javax.naming.NamingException;
import javax.xml.bind.JAXBException;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.BindingType;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.sdm.cdr.exception.api.InvalidInputException;

import ca.sdm.cdr.common.singleton.TableCacheSingleton;
import ca.sdm.cdr.common.singleton.TableColumnSingleton;
import ca.sdm.cdr.common.util.CommonUtil;
import ca.sdm.cdr.jdbc.api.patient.query.QueryPatient;
import ca.shoppersdrugmart.rxhb.drx.getpatient.GetPatient;
import ca.shoppersdrugmart.rxhb.drx.getpatient.GetPatientByPatientId;
import ca.shoppersdrugmart.rxhb.drx.getpatient.GetPatientByPatientIdResponse;
import ca.shoppersdrugmart.rxhb.drx.getpatient.GetPatientByQueryCriteria;
import ca.shoppersdrugmart.rxhb.drx.getpatient.GetPatientByQueryCriteriaResponse;
import ca.shoppersdrugmart.rxhb.drx.getpatient.GetPatientResponse;
import ca.shoppersdrugmart.rxhb.ehealth.Patient;

/**
 * This class was generated by the JAX-WS RI. JAX-WS RI 2.2.8-b13937 Generated
 * source version: 2.2

@revision 
TAG  Date	     Vendor       Name 	         Change
---- -----------  -----------  -----------   -------------------
VL99 2018-01-15   NTT Data     Vlad Eidinov  QHR Accuro Project

 
*/


@WebService(portName = "PatientService", serviceName = "PatientService", targetNamespace = "http://shoppersdrugmart.ca/RxHB/DRx/PatientService", wsdlLocation = "/wsdls/PatientService.wsdl", endpointInterface = "ca.shoppersdrugmart.rxhb.drx.patientservice.PatientService")
@BindingType("http://schemas.xmlsoap.org/wsdl/soap/http")
public class PatientService_PatientServiceImpl implements PatientService {
	final static Logger logger = LogManager.getLogger(PatientService_PatientServiceImpl.class);
	  
	public PatientService_PatientServiceImpl() throws NamingException, SQLException, IOException, JAXBException {

		TableCacheSingleton.getInstance("PatientJndi").forceRefresh();
		TableColumnSingleton.getInstance().forceRefresh();
		
	}

	/**
	 * 
	 * @param getPatient
	 * @return returns 
	 *         ca.shoppersdrugmart.rxhb.drx.getpatient.GetPatientResponse
	 */
	public GetPatientResponse getPatient(GetPatient getPatient) {
		
		
		boolean isSuccess = true;
		Long timer = System.currentTimeMillis();
		int rxNumber = 0;
		String storeNumber = null;
		
		Connection connection = null;
		try {
			CommonUtil.archivePayload(getPatient,GetPatient.class, "_GetPatientByRxNumRequest.xml");  //VL99
			rxNumber = getPatient.getRxNumber();
			storeNumber = getPatient.getStoreNumber();
			if (logger.isWarnEnabled())  {logger.warn("StartService Call: PatientService.getPatient. rxNumber : " + rxNumber + ", storeNumber : "	+ storeNumber);}
			
			connection = CommonUtil.getConnection();
			GetPatientResponse response = new GetPatientResponse();
			QueryPatient query = new QueryPatient(connection);
			Patient patient = query.getPatient(storeNumber, rxNumber);
			response.setPatient(patient);
			
			CommonUtil.archivePayload(response,GetPatientResponse.class, "_GetPatientByRxNumResponse.xml");  //VL99
			return response;
		} catch (Exception e) {
			isSuccess = false;
			e.printStackTrace();
			throw CommonUtil.faultGenerator(e, "PatientService", "getPatient","DP");
		} finally {
			if (connection != null) {
				CommonUtil.releaseConnection(connection);
				if (logger.isWarnEnabled())  {logger.warn("EndService Call: isSuccess:" + isSuccess + ". PatientService.getPatient. rxNumber : "
						+ rxNumber + ", storeNumber : " + storeNumber + ". Total time is : "
						+ (System.currentTimeMillis() - timer) + " ms");}
			}
		}
	}

	/**
	 * 
	 * @param getPatientByPatientId
	 * @return returns ca.shoppersdrugmart.rxhb.drx.getpatient.
	 *         GetPatientByPatientIdResponse
	 */
	public GetPatientByPatientIdResponse getPatientByPatientId(GetPatientByPatientId getPatientByPatientId) {
		
		boolean isSuccess = true;
		Long timer = System.currentTimeMillis();
		String patientId = null;
		String storeNumber = null;
		Connection connection = null;
		try {
			CommonUtil.archivePayload(getPatientByPatientId,GetPatientByPatientId.class, "_GetPatientByIdRequest.xml");  //VL99
			patientId = getPatientByPatientId.getPatientId();
			storeNumber = getPatientByPatientId.getStoreNumber();
			if (logger.isWarnEnabled())  {logger.warn("StartService Call: PatientService.getPatientByPatientId. patientId : " + patientId + ", storeNumber : " + storeNumber);}
			
			connection = CommonUtil.getConnection();
			GetPatientByPatientIdResponse response = new GetPatientByPatientIdResponse();
			QueryPatient query = new QueryPatient(connection);
			Patient patient = query.getPatientByPatientId(storeNumber, patientId);
			response.setPatient(patient);
			
			CommonUtil.archivePayload(response,GetPatientByPatientIdResponse.class, "_GetPatientByIdResponse.xml");  //VL99
			return response;

		} catch (Exception e) {
			isSuccess = false;
			e.printStackTrace();
			throw CommonUtil.faultGenerator(e, "PatientService", "getPatientByPatientId","DP");
		} finally {
			CommonUtil.releaseConnection(connection);
			if (logger.isWarnEnabled())  {logger.warn("EndService Call: isSuccess:" + isSuccess
					+ ". PatientService.getPatientByPatientId. patientId : " + patientId + ", storeNumber : "
					+ storeNumber + ". Total time is : " + (System.currentTimeMillis() - timer) + " ms");}
		}
	}

	/**
	 * 
	 * @param getPatientByQueryCriteria
	 * @return returns ca.shoppersdrugmart.rxhb.drx.getpatient.
	 *         GetPatientByQueryCriteriaResponse
	 */
	public GetPatientByQueryCriteriaResponse getPatientByQueryCriteria(
			GetPatientByQueryCriteria getPatientByQueryCriteria) {
		
		boolean isSuccess = true;
		Long timer = System.currentTimeMillis();
		if (logger.isWarnEnabled())  {logger.warn("StartService Call: PatientService.getPatientByQueryCriteria.");}

		List<Patient> patientList = null;
		Connection connection = null;
		String firstName = null;
		String lastName = null;
		String phoneNumber = null;
		String storeNumber = null;
		XMLGregorianCalendar inputDateOfBirth = null;

		try {
			if (getPatientByQueryCriteria == null) {
				throw new InvalidInputException();
			}
			CommonUtil.archivePayload(getPatientByQueryCriteria,GetPatientByQueryCriteria.class, "_GetPatientByQueryCriteriaRequest.xml");  //VL99
			
			firstName = getPatientByQueryCriteria.getQueryCriteria().getFirstName();
			lastName = getPatientByQueryCriteria.getQueryCriteria().getLastName();
			phoneNumber = getPatientByQueryCriteria.getQueryCriteria().getPhoneNumber();
			inputDateOfBirth = getPatientByQueryCriteria.getQueryCriteria().getDateOfBirth();
			storeNumber = getPatientByQueryCriteria.getStoreNumber();
			if (logger.isWarnEnabled())  {logger.warn("StartService Call: PatientService.getPatientByQueryCriteria. firstName : " + firstName
					+ ", lastName : " + lastName + " , phoneNumber : " + phoneNumber + " , inputDateOfBirth : "
					+ inputDateOfBirth  +", storeNumber : " + storeNumber);}

			// check if the top level objects exist. if not throw and exception
			if (getPatientByQueryCriteria.getQueryCriteria() == null) {
				throw new InvalidInputException();

			}

			// if the top level objects are presented check if at least one of
			// the parameters exist. if not, then throw an exception
			Date dateOfBirth = null;
			

			firstName = firstName != null ? firstName.trim() : null;
			lastName = lastName != null ? lastName.trim() : null;
			phoneNumber = phoneNumber != null ? phoneNumber.trim() : null;

			if ((firstName == null || firstName.isEmpty()) && (lastName == null || lastName.isEmpty())
					&& (phoneNumber == null || phoneNumber.isEmpty()) && (inputDateOfBirth == null)) {
				throw new InvalidInputException();
			}

			if (inputDateOfBirth != null) {
				dateOfBirth = inputDateOfBirth.toGregorianCalendar().getTime();
			}

			connection = CommonUtil.getConnection();
			connection.setAutoCommit(false);
			GetPatientByQueryCriteriaResponse response = new GetPatientByQueryCriteriaResponse();
			QueryPatient query = new QueryPatient(connection);

			patientList = query.getPatientByQueryCriteria(firstName, lastName, dateOfBirth, phoneNumber, storeNumber);

			for (Patient patient : patientList) {
				response.getPatient().add(patient);
			}

			CommonUtil.archivePayload(response,GetPatientByQueryCriteriaResponse.class, "_GetPatientByQueryCriteriaResponse.xml");  //VL99
			connection.commit();
			return response;

		} catch (Exception e) {
			isSuccess = false;
			e.printStackTrace();
			throw CommonUtil.faultGenerator(e, "PatientService", "getPatientByQueryCriteria","DP");
		} finally {
			CommonUtil.releaseConnection(connection);
			if (logger.isWarnEnabled())  {logger.warn("EndService Call: isSuccess:" + isSuccess
					+ ". PatientService.getPatientByQueryCriteria. firstName : " + firstName + ", lastName : "
					+ lastName + " , phoneNumber : " + phoneNumber + " , inputDateOfBirth : " + inputDateOfBirth 
					+", storeNumber : " + storeNumber
					+ ". Total time is : " + (System.currentTimeMillis() - timer) + " ms");}
		}
	}

}
